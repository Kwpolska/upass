#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Kw’s Release Tools/Python Project Template
# Commit and Changelog Parser
# Copyright © 2013-2018, Chris Warrick.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions, and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions, and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the author of this software nor the names of
#    contributors to this software may be used to endorse or promote
#    products derived from this software without specific prior written
#    consent.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


"""
Parse commits and changelogs for PyPT.

Usage: .pypt/commitlog FILE BASEDIR NEWVERSION, where
    FILE is the path to the CMFN file to parse,
    BASEDIR is the project directory,
    NEWVERSION is the new version number.
    All paths should be absolute.
"""


import argparse
import re
import sys
from os.path import join as pjoin


# Stolen from textwrap in Python 3.4.3 with PEP257 fixes
def indent(text, prefix, predicate=None):
    """Add 'prefix' to the beginning of selected lines in 'text'.

    If 'predicate' is provided, 'prefix' will only be added to the lines
    where 'predicate(line)' is True. If 'predicate' is not provided,
    it will default to adding 'prefix' to all non-empty lines that do not
    consist solely of whitespace characters.
    """
    if predicate is None:
        def predicate(line):
            return line.strip()

    def prefixed_lines():
        for line in text.splitlines(True):
            yield (prefix + line if predicate(line) else line)
    return ''.join(prefixed_lines())


def main():
    """commitlog main function."""
    parser = argparse.ArgumentParser(
        description="Commit and Changelog Parser "
                    "(part of Chris Warrick's Python Project Template)")
    parser.add_argument('filename', metavar='FILE', nargs=1,
                        help='File to parse')
    parser.add_argument('basedir', metavar='BASEDIR', nargs=1,
                        help='Project directory')
    parser.add_argument('new_version', metavar='NEWVERSION', nargs=1,
                        help='New version (X.Y.Z)')
    args = parser.parse_args()
    # nargs gets you lists, not strings
    filename = args.filename[0]
    basedir = args.basedir[0]
    new_version = args.new_version[0]

    with open(filename) as fh:
        e = re.findall('#~ (C[A-Z]+) MESSAGE START ~#\n(.*?)\n#~ (C[A-Z]+) MESSAGE '
                       'END ~#', fh.read(), flags=re.S)

    for i in e:
        i = list(i)
        if i[0] != i[2]:
            print('ERROR: mismatched tags')
            return 1
        else:
            if i[0] == 'COMMIT':
                with open(filename + '-commit', 'w') as fh:
                    fh.write(i[1])
            elif i[0] == 'CHANGELOG':
                with open(pjoin(basedir, 'docs', 'CHANGELOG.rst')) as fh:
                    currentfile = fh.read()

                # A bit fragile...
                currentver = re.search(':Version: (.*)',
                                       currentfile).groups()[0]
                clog = indent(i[1], 4 * ' ')

                with open(pjoin(basedir, 'docs', 'CHANGELOG.rst'), 'w') as fh:
                    fh.write(currentfile.replace(
                        '\n' + currentver,
                        '\n{0}\n{1}\n\n{2}'.format(
                            new_version, clog, currentver)))


if __name__ == '__main__':
    sys.exit(main())
